Конечно, вот пошаговое выполнение вашего задания.

### 1\.  запускаем контейнер

Чтобы запустить контейнер Nginx, убрав все права и добавив только необходимые, нужно определить, какие именно capabilities требуются для его работы.

  * `NET_BIND_SERVICE`: Позволяет привязываться к привилегированным портам (ниже 1024), что необходимо для работы Nginx на стандартных портах 80 (HTTP) и 443 (HTTPS).
  * `SETGID` и `SETUID`: Позволяют главному процессу Nginx (запущенному от root) сменить идентификатор группы и пользователя для своих рабочих процессов на менее привилегированного пользователя (обычно `nginx`), что является стандартной практикой безопасности.
  * `CHOWN`: Требуется главному процессу для смены владельца файлов кэша и логов, чтобы рабочие процессы с пониженными правами могли в них писать.

Используем следующую команду для запуска контейнера с этими параметрами:

```bash
docker run -d \
--name inno-dkr-24 \
--cap-drop=ALL \
--cap-add=NET_BIND_SERVICE \
--cap-add=SETGID \
--cap-add=SETUID \
--cap-add=CHOWN \
nginx:stable-alpine
```

-----

### 2\. Проверяем, что контейнер запущен

Теперь выведем список всех запущенных контейнеров с помощью команды `docker ps`, чтобы убедиться, что наш контейнер `inno-dkr-24` работает.

**Команда:**

```bash
docker ps
```

**Ожидаемый результат:**
Вы увидите в списке свой контейнер, что-то вроде этого:

```
CONTAINER ID   IMAGE                 COMMAND                  CREATED         STATUS         PORTS     NAMES
a1b2c3d4e5f6   nginx:stable-alpine   "/docker-entrypoint.…"   5 seconds ago   Up 4 seconds   80/tcp    inno-dkr-24
```

-----

### 3\. Выводим подробную информацию о контейнере

Наконец, чтобы проверить, что все capabilities были применены корректно, используем команду `docker inspect`.

**Команда:**

```bash
docker inspect inno-dkr-24
```

**Результат:**
Эта команда выведет длинный JSON-объект с полной информацией о контейнере. Внутри этого объекта, в секции `"HostConfig"`, вы найдете подтверждение, что все ненужные capabilities были убраны (`"CapDrop": ["ALL"]`), а необходимые — добавлены.

**Фрагмент вывода `docker inspect` для проверки:**

```json
...
        "HostConfig": {
            "CapAdd": [
                "SETGID",
                "SETUID",
                "CHOWN",
                "NET_BIND_SERVICE"
            ],
            "CapDrop": [
                "ALL"
            ],
...
```

Эта часть вывода точно показывает, что задача выполнена верно: все права по умолчанию удалены, и добавлены только те четыре, которые мы указали.